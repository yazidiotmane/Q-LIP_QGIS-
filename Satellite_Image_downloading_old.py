# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SatelliteImageDownloading
                                 A QGIS plugin
 Plugin in order de download Satellite Image 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-01-30
        git sha              : $Format:%H$
        copyright            : (C) 2020 by FSTT
        email                : yazidiotmane@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon,QPixmap,QImage
from qgis.PyQt.QtWidgets import QAction,QFileDialog,QDialog,QListView
from PyQt5 import QtWidgets
import urllib
from os import listdir
from os.path import isfile, join
from qgis.core import QgsRasterLayer,QgsProject
from math import sin,radians,pi,cos,pow,log


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Satellite_Image_downloading_dialog import SatelliteImageDownloadingDialog
import os.path
import landsatxplore.api
from landsatxplore.earthexplorer import EarthExplorer
import processing

class SatelliteImageDownloading:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SatelliteImageDownloading_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Satellite Image Downloading')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SatelliteImageDownloading', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Satellite_Image_downloading/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Download Satellite Image'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Satellite Image Downloading'),
                action)
            self.iface.removeToolBarIcon(action)
    def CloudCouverageDisplay(self):
        var=self.dlg.cloudslider.value()
        self.dlg.label_value.setText(str(var)+'%')
    def display_image(self,url):
        
        #url = 'https://ims.cr.usgs.gov/browse/landsat_8_c1/2020/195/034/LC08_L1TP_195034_20200116_20200127_01_T1.jpg'
        data = urllib.request.urlopen(url).read()

        image = QImage()
        image.loadFromData(data)
        image.scaled(100, 100)
        
        #self.dlg.label_image.setPixmap(QPixmap(image))
        
        pixmap = QPixmap(image)
        pixmap4 = pixmap.scaled(200, 200, QtCore.Qt.KeepAspectRatio)
        self.dlg.label_image.setPixmap(pixmap4)

    def DownloadingLandsat(self):
        '''
        # Initialize a new API instance and get an access key
        api = landsatxplore.api.API('Boutaina', 'boutaina123456789')
        type_image=self.dlg.combo_sat.currentText()
        stratDate=self.dlg.dateEditStart.date().toString('yyyy-MM-dd')
        endDate=self.dlg.dateEditEnd.date().toString('yyyy-MM-dd')
        cloudpoucentage=self.dlg.cloudslider.value()
        varLat=36.04305
        varLong=-5.08955

        
        # Request
        scenes = api.search(
            dataset=type_image,
            latitude=varLat,
            longitude=-varLong,
            start_date=stratDate,
            end_date=endDate,
            max_cloud_cover=cloudpoucentage)
        '''
        # Initialize a new API instance and get an access key
        api = landsatxplore.api.API('Boutaina', 'boutaina123456789')

        # Request
        var_latitude=36.04941
        var_longitude=-5.18683
        var_datedebut=self.dlg.dateEditStart.date().toString('yyyy-MM-dd')
        var_datefin=self.dlg.dateEditEnd.date().toString('yyyy-MM-dd')
        var_cloud=self.dlg.cloudslider.value()
        var_typeSat=self.dlg.combo_sat.currentText()
        print(var_cloud)
        scenes = api.search(
            dataset=var_typeSat,
            latitude=var_latitude,
            longitude=var_longitude,
            start_date=var_datedebut,
            end_date=var_datefin,
            max_cloud_cover=int(var_cloud))
        print('{} Results found/النتائج المتوفرة:'.format(len(scenes)))
        self.dlg.lbl_number_found.setText('{} Results found/النتائج المتوفرة:'.format(len(scenes)))
        for scene in scenes:
            print(scene['acquisitionDate'])
            print('&&&&&&&'+str(scene['cloudCover'])+'&&&&&&&&&')
        i=0
        self.dlg.tableResult.clear()
        for scene in scenes:
                item = QtWidgets.QTableWidgetItem(scene['acquisitionDate'])
                self.dlg.tableResult.setItem(i, 1, item)
                item1 = QtWidgets.QTableWidgetItem(scene['displayId'])
                self.dlg.tableResult.setItem(i, 0, item1)
                item2 = QtWidgets.QTableWidgetItem(scene['browseUrl'])
                self.dlg.tableResult.setItem(i, 2, item2)
                item3 = QtWidgets.QTableWidgetItem(str(scene['cloudCover']))
                self.dlg.tableResult.setItem(i, 3, item3)
                i=i+1
        api.logout()
        
    def getWholeInformations(self):
        print(self.dlg.combo_sat.currentText())
        print(self.dlg.dateEditStart.date().toString('yyyy-MM-dd'))
        print(self.dlg.dateEditEnd.date().toString('yyyy-MM-dd'))
        print(self.dlg.cloudslider.value())
        print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')
        self.DownloadingLandsat()
        print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')
        
    def downloading(self):
        print('youpiiiii')
        print(self.dlg.tableResult.item(self.dlg.tableResult.currentRow(),0).text())
        var_id_product=self.dlg.tableResult.item(self.dlg.tableResult.currentRow(),0).text()
        ee = EarthExplorer('Boutaina', 'boutaina123456789')
        ee.download(scene_id=var_id_product, output_dir='/SatDownloaded/Sat')
        ee.logout()
    def openDirectory(self):
        '''
        dialog = QFileDialog()
        dialog.getOpenFileName()
        foo_dir = dialog.getExistingDirectory(self, '/SatDownloaded')
        print(foo_dir)
        '''
        mypath=QFileDialog.getExistingDirectory()
        self.dlg.lineEdit_url.setText(mypath)
        #dialog.setSidebarUrls([QtCore.QUrl.fromLocalFile('/SatDownloaded')])

        onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]     
        self.dlg.listWidget_files.clear()    
        onlytif=[]
        self.dlg.tableWidget_MetaData.clear()
        for i in range(0,len(onlyfiles)):
            if  onlyfiles[i][0:4]=='LE07':
                 if onlyfiles[i][-1:-5:-1]=='FIT.':
                     onlytif.append(onlyfiles[i])
                 elif onlyfiles[i][-1:-8:-1]=='txt.LTM':
                     print(mypath+'/'+onlyfiles[i])
                     self.LoadMetaData7(mypath+'/'+onlyfiles[i])
            elif onlyfiles[i][0:4]=='LC08':
                 if onlyfiles[i][-1:-5:-1]=='FIT.':
                        onlytif.append(onlyfiles[i])
                 elif onlyfiles[i][-1:-8:-1]=='txt.LTM':
                        print(mypath+'/'+onlyfiles[i])
                        self.LoadMetaData8(mypath+'/'+onlyfiles[i])
            elif onlyfiles[i][0:4]=='LT05':
                 if onlyfiles[i][-1:-5:-1]=='FIT.':
                        onlytif.append(onlyfiles[i])
                 elif onlyfiles[i][-1:-8:-1]=='txt.LTM':
                        print(mypath+'/'+onlyfiles[i])
                        self.LoadMetaData5(mypath+'/'+onlyfiles[i])
        self.dlg.listWidget_files.addItems(onlytif)
    def Display(self):
        picToDownload=self.dlg.tableResult.item(self.dlg.tableResult.currentRow(),2).text()
        print(picToDownload)
        self.display_image(picToDownload)
    def DisplayRaster(self):
        print(self.dlg.listWidget_files.currentItem().text())
        layer1 = QgsRasterLayer('/SatDownloaded/image1/'+self.dlg.listWidget_files.currentItem().text(), 'layer1')
        QgsProject.instance().addMapLayer(layer1)
        
    def RunProcessing33(self):

            #self.calculradiance7()
            #self.calculradiance8()
            #self.calculTOA7()
            #self.CalculBrightness8()
            #self.CalculBrightness7()
            self.moyenne()
            
        
        #---------------------------Brightness temperature for Landsat 5 -----------------------------------------------
         
    def CalculBrightness5(self):
       
        V_K1=float(str(self.dlg.tableWidget_MetaData.item(5,5).text()))
        V_K2=float(str(self.dlg.tableWidget_MetaData.item(5,6).text()))
        print("V_1,V_2",V_K1,V_K2)
        var=((1260.56)/(log((607.76/8.492)+1)))
        print(var)
    
        #var=({0}*A*pow({1},2))/({2}+cos(radians(90-{3}))).format(V_Pi,V_sunDistance,V_Esun,V_sunElevation)
        #var=(V_Pi*193*pow(V_sunDistance,2))/(V_Esun*sin(radians(V_sunElevation)))
        #print(var)
        
    
        input_raster = QgsRasterLayer('/SatDownloaded/image1/imageTraiteeRadianceBand66.TIF', 'Raster')
        QgsProject.instance().addMapLayer(input_raster)
        output_raster = '/SatDownloaded/image1/imageTraiteeBTtst6Celcius.TIF'
        parameters = {'INPUT_A': input_raster,
        'BAND_A' : 1,
        'FORMULA': "((({0})/(log(({1}/A)+1)))-273.15)".format(V_K2,V_K1),
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)

        #--------------------------Brightness temperature for Landsat7

    def CalculBrightness7(self):
       
        V_K1=float(str(self.dlg.tableWidget_MetaData.item(5,5).text()))
        V_K2=float(str(self.dlg.tableWidget_MetaData.item(5,6).text()))
        print("V_1,V_2",V_K1,V_K2)
        var=((1260.56)/(log((607.76/8.492)+1)))
        print(var)
    
        #var=({0}*A*pow({1},2))/({2}+cos(radians(90-{3}))).format(V_Pi,V_sunDistance,V_Esun,V_sunElevation)
        #var=(V_Pi*193*pow(V_sunDistance,2))/(V_Esun*sin(radians(V_sunElevation)))
        #print(var)
        
    
        input_raster = QgsRasterLayer('/SatDownloaded/image3/imageRadiance7B6_1_4.TIF', 'Raster')
        QgsProject.instance().addMapLayer(input_raster)
        output_raster = '/SatDownloaded/image3/imageTraiteeBT88Celcius.TIF'
        parameters = {'INPUT_A': input_raster,
        'BAND_A' : 1,
        'FORMULA': "((({0})/(log(({1}/A)+1)))-273.15)".format(V_K2,V_K1),
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)
        
        #---------------------Calcul of brightness temperature for Landsat 8-------------------------
    def CalculBrightness8(self):

        V_K1=float(str(self.dlg.tableWidget_MetaData.item(9,5).text()))
        V_K2=float(str(self.dlg.tableWidget_MetaData.item(9,6).text()))
        print("V_1,V_2",V_K1,V_K2)
        
        input_raster = QgsRasterLayer('/SatDownloaded/image2/imageRadiance8B10_1.TIF', 'Raster')
        QgsProject.instance().addMapLayer(input_raster)
        output_raster = '/SatDownloaded/image2/BT_L8_B10.TIF'
        parameters = {'INPUT_A': input_raster,
        'BAND_A' : 1,
        'FORMULA': "((({0})/(log(({1}/A)+1)))-273.15)".format(V_K2,V_K1),
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)
        


        #---------------------------Reflectance calcul (TOA Reflectance) aprouved for Landsat 5 -----------------------------------------------
    def CalculTOA5(self):
        
        V_sunDistance=float(self.dlg.lbl_earthsundistance.text())
        V_sunElevation=float(self.dlg.lbl_sunelevangle.text())
        V_Pi = pi
        V_Esun=float(str(self.dlg.tableWidget_MetaData.item(0,11).text()))
        print("V_sund,V_sunelev,V_pi,V_Esun",V_sunDistance,V_sunElevation,V_Pi,V_Esun)
        A=float(193)
        #var=({0}*A*pow({1},2))/({2}+cos(radians(90-{3}))).format(V_Pi,V_sunDistance,V_Esun,V_sunElevation)
        #var=(V_Pi*193*pow(V_sunDistance,2))/(V_Esun*sin(radians(V_sunElevation)))
        #print(var)

        
        input_raster = QgsRasterLayer('/SatDownloaded/image1/imageTraiteeRadianceBt16.TIF', 'Raster')
        QgsProject.instance().addMapLayer(input_raster)
        output_raster = '/SatDownloaded/image1/imageTraiteeReflectanceTOA3.TIF'
        parameters = {'INPUT_A': input_raster,
        'BAND_A' : 1,
        'FORMULA': "({0}*A*pow({1},2))/({2}*sin(radians({3})))".format(V_Pi,V_sunDistance,V_Esun,V_sunElevation),
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)

        #---------------------------Reflectance calcul (TOA Reflectance) for Landsat 7 -----------------------------------------------

    def calculTOA7(self):
        
        V_sunDistance=float(self.dlg.lbl_earthsundistance.text())
        V_sunElevation=float(self.dlg.lbl_sunelevangle.text())
        V_Pi = pi
        V_Esun=float(str(self.dlg.tableWidget_MetaData.item(1,11).text()))
        print("V_sund,V_sunelev,V_pi,V_Esun",V_sunDistance,V_sunElevation,V_Pi,V_Esun)

        #A=float(193)
        #var=({0}*A*pow({1},2))/({2}+cos(radians(90-{3}))).format(V_Pi,V_sunDistance,V_Esun,V_sunElevation)
        #var=(V_Pi*193*pow(V_sunDistance,2))/(V_Esun*sin(radians(V_sunElevation)))
        #print(var)
        
        input_raster = QgsRasterLayer('/SatDownloaded/image3/imageRadiance7B2_1.TIF', 'Raster')
        QgsProject.instance().addMapLayer(input_raster)
        output_raster = '/SatDownloaded/image3/imageTOA7B2_1.TIF'
        parameters = {'INPUT_A': input_raster,
        'BAND_A' : 1,
        'FORMULA': "({0}*A*pow({1},2))/({2}*sin(radians({3})))".format(V_Pi,V_sunDistance,V_Esun,V_sunElevation),
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)
       
        #---------------------------Reflectance calcul (TOA Reflectance) for Landsat 8 -----------------------------------------------
        
    def calculTOA8(self):
        
        V_sunElevation=float(self.dlg.lbl_sunelevangle.text())
        V_reflectanceMult = float(str(self.dlg.tableWidget_MetaData.item(1,3).text()))
        V_reflectanceAdd = float(str(self.dlg.tableWidget_MetaData.item(1,4).text()))

        input_raster = QgsRasterLayer('/SatDownloaded/image2/LC08_L1TP_201035_20190107_20190130_01_T1/LC08_L1TP_201035_20190107_20190130_01_T1_B2.TIF', 'Raster')
        QgsProject.instance().addMapLayer(input_raster)
        output_raster = '/SatDownloaded/image2/imageTOAB2_2.TIF'
        parameters = {'INPUT_A': input_raster,
        'BAND_A' : 1,
        'FORMULA': "((({0}*A)+{1})/sin(radians({2})))".format(V_reflectanceMult,V_reflectanceAdd,V_sunElevation),
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)


        #--------------- radiance calcul (approuved) for Landsat5 -------------------------------------
    def calculradiance5(self):
        
        V_lmax = float(str(self.dlg.tableWidget_MetaData.item(5,7).text()))
        V_lmin = float(str(self.dlg.tableWidget_MetaData.item(5,8).text()))
        V_Qcalmax=float(str(self.dlg.tableWidget_MetaData.item(5,9).text()))
        V_Qcalmin=float(str(self.dlg.tableWidget_MetaData.item(5,10).text()))
        print('qlmax qlmin lmax lmin',V_Qcalmax,V_Qcalmin,V_lmax,V_lmin)
        
        #V_lmax=float(193)
        #V_lmin=float(-1.52)
        #V_Qcalmax=float(255)
        #V_Qcalmin=float(1)
        #print("eval((((({0}-{1})*(255-{3}))/({2}-{3}))+{1})".format(V_lmax,V_lmin,V_Qcalmax,V_Qcalmin)))
        #'FORMULA': "((((((193 + 1.52) * A)/ 255 )) - 1.52))"
        #'FORMULA': "(((((({0} - {1}) * A)/ {2} )) + {1}))".format(V_lmax,V_lmin,V_Qcalmax),
        #'FORMULA': "((  (   ({0} - {1}) * (A-{3}) )/ ({2}-{3})) + {1})".format(V_lmax,V_lmin,V_Qcalmax,V_Qcalmin)
        
        input_raster = QgsRasterLayer('/SatDownloaded/image2/LC08_L1TP_201035_20190107_20190130_01_T1/LC08_L1TP_201035_20190107_20190130_01_T1_B2.TIF', 'Raster')
        QgsProject.instance().addMapLayer(input_raster)
        output_raster = '/SatDownloaded/image2/imageRadiance8B2_1.TIF'
        parameters = {'INPUT_A': input_raster,
        'BAND_A' : 1,
        'FORMULA': "((((({0}-{1})/({2}-{3})) * (A-{3})))+{1})".format(V_lmax,V_lmin,V_Qcalmax,V_Qcalmin),
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)

        #--------------- radiance calcul (approuved) for Landsat5 -------------------------------------
    def moyenne(self):
        input_rasterA = QgsRasterLayer('/SatDownloaded/image3/imageTraiteeBT77Celcius.TIF', 'Raster1')
        QgsProject.instance().addMapLayer(input_rasterA)
        
        input_rasterB = QgsRasterLayer('/SatDownloaded/image3/imageTraiteeBT88Celcius.TIF', 'Raster2')
        QgsProject.instance().addMapLayer(input_rasterB)
        
        output_raster = '/SatDownloaded/image3/imageRadianceMoy.TIF'
        parameters = {'INPUT_A': input_rasterA,'INPUT_B': input_rasterB,
        'BAND_A' : 1,
        'BAND_B' : 1,        
        'FORMULA': "((A+B)/2)",
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)
        
    def calculradiance7(self):
        
        V_lmax = float(str(self.dlg.tableWidget_MetaData.item(5,7).text()))
        V_lmin = float(str(self.dlg.tableWidget_MetaData.item(5,8).text()))
        V_Qcalmax=float(str(self.dlg.tableWidget_MetaData.item(5,9).text()))
        V_Qcalmin=float(str(self.dlg.tableWidget_MetaData.item(5,10).text()))
        print('qlmax qlmin lmax lmin',V_Qcalmax,V_Qcalmin,V_lmax,V_lmin)
        
        input_raster = QgsRasterLayer('/SatDownloaded/image3/LE07_L1TP_201035_20030103_20170214_01_T1_B6_VCID_1.TIF', 'Raster')
        QgsProject.instance().addMapLayer(input_raster)
        output_raster = '/SatDownloaded/image3/imageRadiance7B6_1_4.TIF'
        parameters = {'INPUT_A': input_raster,
        'BAND_A' : 1,
        'FORMULA': "((((({0}-{1})/({2}-{3})) * (A-{3})))+{1})".format(V_lmax,V_lmin,V_Qcalmax,V_Qcalmin),
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)

        #--------------- radiance calcul (approuved) for Landsat5 -------------------------------------

    def calculradiance8(self):
        
        V_radianceMult = float(str(self.dlg.tableWidget_MetaData.item(9,1).text()))
        V_radianceAdd = float(str(self.dlg.tableWidget_MetaData.item(9,2).text()))
        
        print('vradmult,vradadd',V_radianceMult,V_radianceAdd)
        
        #Formula------------------
        input_raster = QgsRasterLayer('/SatDownloaded/image2/LC08_L1TP_201035_20190107_20190130_01_T1/LC08_L1TP_201035_20190107_20190130_01_T1_B10.TIF', 'Raster')
        QgsProject.instance().addMapLayer(input_raster)
        output_raster = '/SatDownloaded/image2/imageRadiance8B10_1.TIF'
        parameters = {'INPUT_A': input_raster,
        'BAND_A' : 1,
        'FORMULA': "(({0} * A)+{1})".format(V_radianceMult,V_radianceAdd),
        'OUTPUT' : output_raster}
        processing.runAndLoadResults('gdal:rastercalculator', parameters)

        

        # ------------------ Parameters necessray for Landsat 5 ------------------------------------- 
    def LoadMetaData5(self,mypath):
        print('$$$$$$$$$$$$$$$$$$$$$$$$  Start File $$$$$$$$$$$$$$$$$$$$$$$$')
        with open(mypath, "r") as f:
             fichier_entier = f.read()
             files = fichier_entier.split("\n")
             #for line in files:
               # Traiter la ligne et ainsi de suite ...
        # i pointeur sur le ligne de fichier
        # j pointeur sur tableau d'affichage 
             j=0
             # Band Id 
             for i in range(46,53):
                print(files[i][24:len(files[i])-1])
                item = QtWidgets.QTableWidgetItem(files[i][24:len(files[i])-1])
                self.dlg.tableWidget_MetaData.setItem(j, 0, item)
                j=j+1
             # Radiance _ mult
             j=0
             for i in range(150,157):
                item = QtWidgets.QTableWidgetItem(files[i][27:])
                self.dlg.tableWidget_MetaData.setItem(j, 1, item)
                j=j+1

            # Radiance _ ADD
             j=0
             for i in range(157,164):
                item = QtWidgets.QTableWidgetItem(files[i][26:])
                self.dlg.tableWidget_MetaData.setItem(j, 2, item)
                j=j+1

             # Reflectance Mult
             j=0
             for i in range(164,169):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 3, item)
                j=j+1
             ligne=6
             item = QtWidgets.QTableWidgetItem(files[169][30:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 3, item)

             # Reflectance ADD
             j=0
             for i in range(170,175):
                item = QtWidgets.QTableWidgetItem(files[i][29:])
                self.dlg.tableWidget_MetaData.setItem(j, 4, item)
                j=j+1
             ligne=6
             item = QtWidgets.QTableWidgetItem(files[175][29:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 4, item)

             ligne=5
             item = QtWidgets.QTableWidgetItem(files[178][25:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 5, item)

             ligne=5
             item = QtWidgets.QTableWidgetItem(files[179][25:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 6, item)
             #throw out sun elevation angle
             var_sunelevation=files[66][20:]
             self.dlg.lbl_sunelevangle.setText(var_sunelevation)
             print(var_sunelevation)
             print(sin(radians(float (var_sunelevation))))

             #Max Radiance 
             j=0
             for i in range(88,102,2):
                item = QtWidgets.QTableWidgetItem(files[i][29:])
                self.dlg.tableWidget_MetaData.setItem(j, 7, item)
                j=j+1

            #Min Radiance 
             j=0
             for i in range(89,102,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 8, item)
                j=j+1
            #Men Solar exoAthmospheric irradiance
             ESUN = ['1958','1827','1551','1036','214.9','0','80.65']
             j=0
             for i in ESUN:
                 item = QtWidgets.QTableWidgetItem(i)
                 self.dlg.tableWidget_MetaData.setItem(j, 11, item)
                 j=j+1
             # Qcal Max
             j=0
             for i in range(118,132,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 9, item)
                j=j+1

             # Qcal Max
             j=0
             for i in range(119,132,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 10, item)
                j=j+1
            #Earth Sun Distance
             EarthSunDis=files[67][25:]
             print('yoooooopi :',EarthSunDis)
             self.dlg.lbl_earthsundistance.setText(EarthSunDis)
             
    #----------------data necessary for Landsat 8 -------------------------------

    def LoadMetaData8(self,mypath):
        print('$$$$$$$$$$$$$$$$$$$$$$$$  Start File $$$$$$$$$$$$$$$$$$$$$$$$')
        #with open("/SatDownloaded/image2/LC08_L1TP_201035_20190107_20190130_01_T1/LC08_L1TP_201035_20190107_20190130_01_T1_MTL.txt", "r") as f:
        with open(mypath, "r") as f:
             fichier_entier = f.read()
             files = fichier_entier.split("\n")
             #for line in files:
               # Traiter la ligne et ainsi de suite ...
        # i pointeur sur le ligne de fichier
        # j pointeur sur tableau d'affichage 
             j=0
             # Band Id 
             for i in range(47,58):
                print(files[i][24:len(files[i])-1])
                item = QtWidgets.QTableWidgetItem(files[i][24:len(files[i])-1])
                self.dlg.tableWidget_MetaData.setItem(j, 0, item)
                j=j+1
             # Radiance _ mult
             j=0
             for i in range(165,176):
                item = QtWidgets.QTableWidgetItem(files[i][27:])
                self.dlg.tableWidget_MetaData.setItem(j, 1, item)
                j=j+1

            # Radiance _ ADD
             j=0
             for i in range(176,187):
                item = QtWidgets.QTableWidgetItem(files[i][26:])
                self.dlg.tableWidget_MetaData.setItem(j, 2, item)
                j=j+1

             # Reflectance Mult
             j=0
             for i in range(187,196):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 3, item)
                j=j+1
             
             # Reflectance ADD
             j=0
             for i in range(196,205):
                item = QtWidgets.QTableWidgetItem(files[i][29:])
                self.dlg.tableWidget_MetaData.setItem(j, 4, item)
                j=j+1
            

             ligne=9
             item = QtWidgets.QTableWidgetItem(files[207][25:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 5, item)

             item = QtWidgets.QTableWidgetItem(files[208][25:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 6, item)


             ligne=10
             item = QtWidgets.QTableWidgetItem(files[209][25:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 5, item)
             
             item = QtWidgets.QTableWidgetItem(files[210][25:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 6, item)

             #throw out sun elevation angle
             var_sunelevation=files[76][20:]
             print(var_sunelevation)
             print(sin(radians(float (var_sunelevation))))

             #throw out sun elevation angle
             var_sunelevation=files[76][20:]
             self.dlg.lbl_sunelevangle.setText(var_sunelevation)
             print(var_sunelevation)
             print(sin(radians(float (var_sunelevation))))

        # ------------------ Parameters necessray for Landsat 7------------------------------------- 
    def LoadMetaData7(self,pathMTL):
        print('$$$$$$$$$$$$$$$$$$$$$$$$  Start File $$$$$$$$$$$$$$$$$$$$$$$$')
        #with open("/SatDownloaded/image3/LE07_L1TP_201035_20030103_20170214_01_T1_MTL.txt", "r") as f:
        with open(pathMTL, "r") as f:
             fichier_entier = f.read()
             files = fichier_entier.split("\n")
             #for line in files:
               # Traiter la ligne et ainsi de suite ...
        # i pointeur sur le ligne de fichier
        # j pointeur sur tableau d'affichage 
             j=0
             # Band Id 
             for i in range(47,52):
                print(files[i][24:len(files[i])-1])
                item = QtWidgets.QTableWidgetItem(files[i][24:len(files[i])-1])
                self.dlg.tableWidget_MetaData.setItem(j, 0, item)
                j=j+1

             for i in range(52,54):
                print(files[i][24:len(files[i])-1])
                item = QtWidgets.QTableWidgetItem(files[i][31:len(files[i])-1])
                self.dlg.tableWidget_MetaData.setItem(j, 0, item)
                j=j+1
                
             for i in range(54,56):
                print(files[i][24:len(files[i])-1])
                item = QtWidgets.QTableWidgetItem(files[i][24:len(files[i])-1])
                self.dlg.tableWidget_MetaData.setItem(j, 0, item)
                j=j+1  

             '''ligne=5
             item = QtWidgets.QTableWidgetItem(files[52][31:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 0, item)
             
             ligne=6
             item = QtWidgets.QTableWidgetItem(files[53][31:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 0, item)
             
             ligne=7
             item = QtWidgets.QTableWidgetItem(files[54][24:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 0, item)
             
             ligne=8
             item = QtWidgets.QTableWidgetItem(files[55][24:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 0, item)'''
             
             # Radiance _ mult
             j=0
             for i in range(188,193):
                item = QtWidgets.QTableWidgetItem(files[i][27:])
                self.dlg.tableWidget_MetaData.setItem(j, 1, item)
                j=j+1

             for i in range(193,195):
                item = QtWidgets.QTableWidgetItem(files[i][34:])
                self.dlg.tableWidget_MetaData.setItem(j, 1, item)
                j=j+1
            
             for i in range(195,197):
                item = QtWidgets.QTableWidgetItem(files[i][27:])
                self.dlg.tableWidget_MetaData.setItem(j, 1, item)
                j=j+1
                
             '''ligne=5
             item = QtWidgets.QTableWidgetItem(files[193][34:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 1, item)
             
             ligne=6
             item = QtWidgets.QTableWidgetItem(files[194][34:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 1, item)
             
             ligne=7
             item = QtWidgets.QTableWidgetItem(files[195][27:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 1, item)
             
             ligne=8
             item = QtWidgets.QTableWidgetItem(files[196][27:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 1, item)'''

            # Radiance _ ADD
             j=0
             for i in range(197,202):
                item = QtWidgets.QTableWidgetItem(files[i][26:])
                self.dlg.tableWidget_MetaData.setItem(j, 2, item)
                j=j+1

             for i in range(202,204):
                item = QtWidgets.QTableWidgetItem(files[i][33:])
                self.dlg.tableWidget_MetaData.setItem(j, 2, item)
                j=j+1

             for i in range(204,206):
                item = QtWidgets.QTableWidgetItem(files[i][26:])
                self.dlg.tableWidget_MetaData.setItem(j, 2, item)
                j=j+1

             '''ligne=5
             item = QtWidgets.QTableWidgetItem(files[202][33:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 2, item)
             
             ligne=6
             item = QtWidgets.QTableWidgetItem(files[203][33:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 2, item)
             
             ligne=7
             item = QtWidgets.QTableWidgetItem(files[204][26:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 2, item)
             
             ligne=8
             item = QtWidgets.QTableWidgetItem(files[205][26:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 2, item)'''

             # Reflectance Mult
             j=0
             for i in range(206,211):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 3, item)
                j=j+1
                
             ligne=7
             item = QtWidgets.QTableWidgetItem(files[211][30:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 3, item)
             
             ligne=8
             item = QtWidgets.QTableWidgetItem(files[212][30:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 3, item)

             # Reflectance ADD
             j=0
             for i in range(213,218):
                item = QtWidgets.QTableWidgetItem(files[i][29:])
                self.dlg.tableWidget_MetaData.setItem(j, 4, item)
                j=j+1
                
             ligne=7
             item = QtWidgets.QTableWidgetItem(files[218][29:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 4, item)
             
             ligne=8
             item = QtWidgets.QTableWidgetItem(files[219][29:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 4, item)

             # K1 et K2

             ligne=5
             item = QtWidgets.QTableWidgetItem(files[222][32:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 5, item)

             ligne=5
             item = QtWidgets.QTableWidgetItem(files[223][32:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 6, item)
             
             ligne=6
             item = QtWidgets.QTableWidgetItem(files[224][32:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 5, item)

             ligne=6
             item = QtWidgets.QTableWidgetItem(files[225][32:])
             self.dlg.tableWidget_MetaData.setItem(ligne, 6, item)
             
             #throw out sun elevation angle
             var_sunelevation=files[67][20:]
             self.dlg.lbl_sunelevangle.setText(var_sunelevation)
             print(var_sunelevation)
             print(sin(radians(float (var_sunelevation))))

             #Max Radiance 
             j=0
             for i in range(85,95,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 7, item)
                j=j+1

             for i in range(95,99,2):
                item = QtWidgets.QTableWidgetItem(files[i][37:])
                self.dlg.tableWidget_MetaData.setItem(j, 7, item)
                j=j+1

             for i in range(99,103,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 7, item)
                j=j+1

             #Min Radiance 
             j=0
             for i in range(86,95,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 8, item)
                j=j+1
                
             for i in range(96,99,2):
                item = QtWidgets.QTableWidgetItem(files[i][37:])
                self.dlg.tableWidget_MetaData.setItem(j, 8, item)
                j=j+1
                
             for i in range(100,103,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 8, item)
                j=j+1
            
             # Qcal Max
             j=0
             for i in range(121,131,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 9, item)
                j=j+1

             for i in range(131,135,2):
                item = QtWidgets.QTableWidgetItem(files[i][37:])
                self.dlg.tableWidget_MetaData.setItem(j, 9, item)
                j=j+1
                
             for i in range(135,139,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 9, item)
                j=j+1

             # Qcal Min
             j=0
             for i in range(122,131,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 10, item)
                j=j+1
                
             for i in range(132,135,2):
                item = QtWidgets.QTableWidgetItem(files[i][37:])
                self.dlg.tableWidget_MetaData.setItem(j, 10, item)
                j=j+1

             for i in range(136,139,2):
                item = QtWidgets.QTableWidgetItem(files[i][30:])
                self.dlg.tableWidget_MetaData.setItem(j, 10, item)
                j=j+1

             #Men Solar exoAthmospheric irradiance
             ESUN = ['1970','1842','1547','1044','225.7','0','0','82.06','1369']
             j=0
             for i in ESUN:
                 item = QtWidgets.QTableWidgetItem(i)
                 self.dlg.tableWidget_MetaData.setItem(j, 11, item)
                 j=j+1
                
            #Earth Sun Distance
             EarthSunDis=files[68][25:]
             print('yoooooopi :',EarthSunDis)
             self.dlg.lbl_earthsundistance.setText(EarthSunDis)
    def changerItem(self):
        self.dlg.combo_sat.setCurrentIndex(self.dlg.combo_product.currentIndex())
            
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SatelliteImageDownloadingDialog()
            self.dlg.cloudslider.valueChanged.connect(self.CloudCouverageDisplay)
            self.dlg.btn_select.clicked.connect(self.getWholeInformations)
            self.dlg.tableResult.itemSelectionChanged.connect(self.Display)
            self.dlg.btn_open_directory.clicked.connect(self.openDirectory)
            self.dlg.listWidget_files.itemDoubleClicked.connect(self.DisplayRaster)
            self.dlg.btn_loadMeta.clicked.connect(self.LoadMetaData7)
            self.dlg.btn_Run.clicked.connect(self.RunProcessing33)
            self.dlg.combo_product.currentIndexChanged.connect(self.changerItem)
            self.dlg.btn_downloading.clicked.connect(self.downloading)
            self.dlg.combo_product.setVisible(False)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
